// <auto-generated />
using System;
using App.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("App.Domain.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("LicenseEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LicenseStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubscriptionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId")
                        .HasName("PK__Company__2D971CAC5B915FF5");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DriverId")
                        .HasName("PK__Driver__F1B1CD04A0A4EEFD");

                    b.HasIndex("CompanyId");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.DriverAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId")
                        .HasName("PK__DriverAs__32499E77A1A48BE3");

                    b.HasIndex("DriverId");

                    b.HasIndex("OrderId");

                    b.ToTable("DriverAssignment", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDD68F1D10AC");

                    b.HasIndex("OrderId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E1228D80A5F");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EstimatedArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCollectedFromCustomer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCollectedFromDriver")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPaidToShop")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OrderAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BCF9A02C0D1");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrderAreaId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShopId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.OrderArea", b =>
                {
                    b.Property<int>("OrderAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderAreaId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliveryFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderAreaId")
                        .HasName("PK__OrderAre__BA78C3F6B86AA73A");

                    b.HasIndex("CompanyId");

                    b.ToTable("OrderArea", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinalStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderStatusId")
                        .HasName("PK__OrderSta__BC674CA1B87E8CD2");

                    b.HasIndex("CompanyId");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.OrdersToReview", b =>
                {
                    b.Property<int>("OrderToReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderToReviewId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OrderAreaId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TrackingPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderToReviewId")
                        .HasName("PK__OrdersTo__F078B8DCD81527F3");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrderAreaId");

                    b.HasIndex("ShopId");

                    b.ToTable("OrdersToReview", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__DC31C1D33EC53D08");

                    b.HasIndex("CompanyId");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.PickUpRequest", b =>
                {
                    b.Property<int>("PickupRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PickupRequestId"));

                    b.Property<int?>("AssignedDriverId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("PickupRequestId")
                        .HasName("PK__PickupRe__898E6238E46BB8F4");

                    b.HasIndex("AssignedDriverId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ShopId");

                    b.ToTable("PickupRequest", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShopId")
                        .HasName("PK__Shop__67C557C9532DCD68");

                    b.HasIndex("CompanyId");

                    b.ToTable("Shop", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.SystemLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("LogId")
                        .HasName("PK__SystemLo__5E548648E2725D02");

                    b.ToTable("SystemLog", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("App.Domain.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("App.Domain.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("App.Domain.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUserToken", b =>
                {
                    b.HasOne("App.Domain.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Models.Driver", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__Driver__CompanyI__5165187F");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("App.Domain.Models.DriverAssignment", b =>
                {
                    b.HasOne("App.Domain.Models.Driver", "Driver")
                        .WithMany("DriverAssignments")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK__DriverAss__Drive__6477ECF3");

                    b.HasOne("App.Domain.Models.Order", "Order")
                        .WithMany("DriverAssignments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__DriverAss__Order__6383C8BA");

                    b.Navigation("Driver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Models.Feedback", b =>
                {
                    b.HasOne("App.Domain.Models.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__OrderI__6754599E");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Models.Order", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__CompanyId__5CD6CB2B");

                    b.HasOne("App.Domain.Models.OrderArea", "OrderArea")
                        .WithMany("Orders")
                        .HasForeignKey("OrderAreaId")
                        .HasConstraintName("FK__Order__OrderArea__5EBF139D");

                    b.HasOne("App.Domain.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK__Order__OrderStat__5FB337D6");

                    b.HasOne("App.Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Order__PaymentMe__60A75C0F");

                    b.HasOne("App.Domain.Models.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK__Order__ShopId__5DCAEF64");

                    b.Navigation("Company");

                    b.Navigation("OrderArea");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("App.Domain.Models.OrderArea", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("OrderAreas")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderArea__Compa__5441852A");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("App.Domain.Models.OrderStatus", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderStat__Compa__571DF1D5");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("App.Domain.Models.OrdersToReview", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("OrdersToReviews")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__OrdersToR__Compa__6C190EBB");

                    b.HasOne("App.Domain.Models.OrderArea", "OrderArea")
                        .WithMany("OrdersToReviews")
                        .HasForeignKey("OrderAreaId")
                        .HasConstraintName("FK__OrdersToR__Order__6E01572D");

                    b.HasOne("App.Domain.Models.Shop", "Shop")
                        .WithMany("OrdersToReviews")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK__OrdersToR__ShopI__6D0D32F4");

                    b.Navigation("Company");

                    b.Navigation("OrderArea");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("App.Domain.Models.PaymentMethod", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__PaymentMe__Compa__59FA5E80");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("App.Domain.Models.PickUpRequest", b =>
                {
                    b.HasOne("App.Domain.Models.Driver", "AssignedDriver")
                        .WithMany("PickupRequests")
                        .HasForeignKey("AssignedDriverId")
                        .HasConstraintName("FK__PickupReq__Assig__72C60C4A");

                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("PickupRequests")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__PickupReq__Compa__70DDC3D8");

                    b.HasOne("App.Domain.Models.Shop", "Shop")
                        .WithMany("PickupRequests")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK__PickupReq__ShopI__71D1E811");

                    b.Navigation("AssignedDriver");

                    b.Navigation("Company");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("App.Domain.Models.Shop", b =>
                {
                    b.HasOne("App.Domain.Models.Company", "Company")
                        .WithMany("Shops")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__Shop__CompanyId__4E88ABD4");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("App.Domain.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("App.Domain.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("App.Domain.Models.Company", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("OrderAreas");

                    b.Navigation("OrderStatuses");

                    b.Navigation("Orders");

                    b.Navigation("OrdersToReviews");

                    b.Navigation("PaymentMethods");

                    b.Navigation("PickupRequests");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("App.Domain.Models.Driver", b =>
                {
                    b.Navigation("DriverAssignments");

                    b.Navigation("PickupRequests");
                });

            modelBuilder.Entity("App.Domain.Models.Order", b =>
                {
                    b.Navigation("DriverAssignments");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("App.Domain.Models.OrderArea", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("OrdersToReviews");
                });

            modelBuilder.Entity("App.Domain.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Domain.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("App.Domain.Models.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("OrdersToReviews");

                    b.Navigation("PickupRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
