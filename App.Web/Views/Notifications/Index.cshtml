@model IEnumerable<App.Domain.DTOs.NotificationDto>

@{
    ViewData["Title"] = "Notifications";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="h3 mb-0">
                    <i class="bi bi-bell me-2"></i>
                    All Notifications
                </h2>
                <div>
                    <button class="btn btn-outline-primary me-2" onclick="markAllAsRead()">
                        <i class="bi bi-check2-all me-1"></i>Mark All Read
                    </button>
                    <button class="btn btn-outline-danger" onclick="clearAllNotifications()">
                        <i class="bi bi-trash me-1"></i>Clear All
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (Model != null && Model.Any())
            {
                <div class="card shadow-sm border-0">
                    <div class="card-body p-0">
                        @foreach (var notification in Model)
                        {
                            var isUnread = !(notification.IsRead ?? false);
                            var timeAgo = GetTimeAgo(notification.CreatedAt);
                            var badgeClass = GetNotificationBadgeClass(notification.Type);
                            var iconClass = GetNotificationIconClass(notification.Type);

                            <div class="notification-item border-bottom @(isUnread ? "unread" : "")" data-id="@notification.NotificationId">
                                <div class="d-flex align-items-start p-3">
                                    <div class="me-3">
                                        <div class="notification-icon @badgeClass">
                                            <i class="@iconClass"></i>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h6 class="notification-title mb-1 @(isUnread ? "fw-bold" : "")">
                                                    @(notification.Title ?? "Notification")
                                                </h6>
                                                <p class="notification-message mb-2 text-muted">
                                                    @(notification.Message ?? "")
                                                </p>
                                                <small class="text-muted">
                                                    <i class="bi bi-clock me-1"></i>@timeAgo
                                                </small>
                                            </div>
                                            <div class="d-flex align-items-center">
                                                @if (isUnread)
                                                {
                                                    <span class="badge bg-primary rounded-pill me-2">New</span>
                                                }
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                        <i class="bi bi-three-dots"></i>
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end">
                                                        @if (isUnread)
                                                        {
                                                            <li>
                                                                <a class="dropdown-item" href="#" onclick="markAsRead(@notification.NotificationId)">
                                                                    <i class="bi bi-check me-2"></i>Mark as Read
                                                                </a>
                                                            </li>
                                                        }
                                                        <li>
                                                            <a class="dropdown-item text-danger" href="#" onclick="deleteNotification(@notification.NotificationId)">
                                                                <i class="bi bi-trash me-2"></i>Delete
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-bell-slash text-muted" style="font-size: 4rem;"></i>
                    </div>
                    <h5 class="text-muted">No notifications yet</h5>
                    <p class="text-muted">When you receive notifications, they'll appear here.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
.notification-item {
    transition: all 0.2s ease;
    cursor: pointer;
}

.notification-item:hover {
    background-color: #f8f9fa !important;
}

.notification-item.unread {
    background-color: #e3f2fd;
    border-left: 4px solid #2196f3 !important;
}

.notification-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
}

.notification-icon.bg-info {
    background-color: #17a2b8 !important;
}

.notification-icon.bg-success {
    background-color: #28a745 !important;
}

.notification-icon.bg-warning {
    background-color: #ffc107 !important;
    color: #212529 !important;
}

.notification-icon.bg-danger {
    background-color: #dc3545 !important;
}

.notification-title {
    color: #212529;
}

.notification-message {
    font-size: 0.9rem;
    line-height: 1.4;
}
</style>

<script>
function markAsRead(notificationId) {
    $.ajax({
        url: '/Notifications/MarkAsRead',
        type: 'POST',
        data: { id: notificationId },
        headers: {
            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
        },
        success: function() {
            location.reload();
        },
        error: function() {
            alert('Error marking notification as read');
        }
    });
}

function markAllAsRead() {
    $.ajax({
        url: '/Notifications/MarkAllAsRead',
        type: 'POST',
        headers: {
            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
        },
        success: function() {
            location.reload();
        },
        error: function() {
            alert('Error marking all notifications as read');
        }
    });
}

function deleteNotification(notificationId) {
    if (confirm('Are you sure you want to delete this notification?')) {
        $.ajax({
            url: '/Notifications/' + notificationId,
            type: 'DELETE',
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function() {
                location.reload();
            },
            error: function() {
                alert('Error deleting notification');
            }
        });
    }
}

function clearAllNotifications() {
    if (confirm('Are you sure you want to delete all notifications? This action cannot be undone.')) {
        // Implementation for clearing all notifications
        alert('Feature coming soon!');
    }
}
</script>

@functions {
    private string GetTimeAgo(DateTime? dateTime)
    {
        if (!dateTime.HasValue) return "Unknown";
        
        var timeSpan = DateTime.Now - dateTime.Value;
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        else if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        else if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        else
            return dateTime.Value.ToString("MMM dd, yyyy");
    }
    
    private string GetNotificationBadgeClass(string? type)
    {
        return type?.ToLower() switch
        {
            "success" => "bg-success",
            "warning" => "bg-warning",
            "error" => "bg-danger",
            _ => "bg-info"
        };
    }
    
    private string GetNotificationIconClass(string? type)
    {
        return type?.ToLower() switch
        {
            "success" => "bi bi-check-circle",
            "warning" => "bi bi-exclamation-triangle",
            "error" => "bi bi-x-circle",
            _ => "bi bi-info-circle"
        };
    }
}

@section Scripts {
    @Html.AntiForgeryToken()
}
