@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <!-- Notifications Dropdown -->
    <li class="nav-item dropdown me-3">
        <a class="nav-link position-relative p-2" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" id="notificationDropdown">
            <i class="bi bi-bell fs-5 text-dark"></i>
            <!-- Notification Badge -->
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationBadge" style="display: none;">
                <span id="notificationCount">0</span>
                <span class="visually-hidden">unread notifications</span>
            </span>
        </a>
        <div class="dropdown-menu dropdown-menu-end shadow-lg border-0" aria-labelledby="notificationDropdown" style="width: 320px; max-height: 400px; overflow-y: auto;">
            <div class="dropdown-header d-flex justify-content-between align-items-center py-2 px-3 bg-light">
                <h6 class="mb-0 fw-bold text-dark">Notifications</h6>
                <button class="btn btn-sm btn-outline-primary" onclick="markAllAsRead()" id="markAllReadBtn">
                    <i class="bi bi-check2-all me-1"></i>Mark all read
                </button>
            </div>
            <div class="dropdown-divider m-0"></div>
            
            <!-- Notifications Container -->
            <div id="notificationsContainer">
                <!-- Notifications will be loaded here -->
                <div class="text-center py-4" id="noNotificationsMessage">
                    <i class="bi bi-bell-slash text-muted fs-1"></i>
                    <p class="text-muted mb-0 mt-2">No new notifications</p>
                </div>
            </div>
            
            <div class="dropdown-divider m-0"></div>
            <div class="dropdown-item-text text-center py-2">
                <a href="/Notifications" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-list-ul me-1"></i>View All Notifications
                </a>
            </div>
        </div>
    </li>

    <!-- User Menu -->
    <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle text-dark d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-person-circle me-2 fs-5"></i>
            <span>@User.Identity?.Name</span>
        </a>
        <ul class="dropdown-menu dropdown-menu-end shadow-sm">
            <li>
                <a class="dropdown-item" asp-area="Identity" asp-page="/Account/Manage/Index">
                    <i class="bi bi-person-gear me-2"></i>Manage Account
                </a>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <form asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                    <button type="submit" class="dropdown-item text-danger">
                        <i class="bi bi-box-arrow-right me-2"></i>Logout
                    </button>
                </form>
            </li>
        </ul>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">
            <i class="bi bi-person-plus me-1"></i>Register
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">
            <i class="bi bi-box-arrow-in-right me-1"></i>Login
        </a>
    </li>
}
</ul>

<!-- Notification Styles -->
<style>
.dropdown-menu {
    border-radius: 12px;
}

.notification-item {
    transition: background-color 0.2s ease;
    border-left: 3px solid transparent;
}

.notification-item:hover {
    background-color: #f8f9fa !important;
}

.notification-item.unread {
    background-color: #e3f2fd;
    border-left-color: #2196f3;
}

.notification-item.unread:hover {
    background-color: #bbdefb !important;
}

.notification-time {
    font-size: 0.75rem;
    color: #6c757d;
}

.notification-title {
    font-weight: 600;
    color: #212529;
    margin-bottom: 2px;
}

.notification-message {
    font-size: 0.875rem;
    color: #495057;
    line-height: 1.3;
}

#notificationDropdown:hover i {
    color: #0d6efd !important;
}

.badge {
    font-size: 0.6rem;
    padding: 3px 6px;
}

@@keyframes bellShake {
    0% { transform: rotate(0deg); }
    10% { transform: rotate(14deg); }
    20% { transform: rotate(-8deg); }
    30% { transform: rotate(14deg); }
    40% { transform: rotate(-4deg); }
    50% { transform: rotate(10deg); }
    60% { transform: rotate(0deg); }
    100% { transform: rotate(0deg); }
}

.bell-shake {
    animation: bellShake 1s ease-in-out;
}
</style>

<!-- Notification JavaScript -->
<script>
// SignalR Connection
let connection = null;

$(document).ready(function() {
    @if (SignInManager.IsSignedIn(User))
    {
        <text>
        // Initialize SignalR connection
        initializeSignalR();
        
        // Load notifications when page loads
        loadNotifications();
        
        // Poll for new notifications every 30 seconds
        setInterval(loadNotifications, 30000);
        
        // Add click handler for notification dropdown
        $('#notificationDropdown').on('click', function() {
            loadNotifications();
        });
        </text>
    }
});

function initializeSignalR() {
    connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

    connection.start()
        .then(function () {
            console.log("SignalR connected successfully");
        })
        .catch(function (err) {
            console.error("SignalR connection error: " + err.toString());
        });

    // Listen for new notifications
    connection.on("ReceiveNotification", function (notification) {
        console.log("New notification received:", notification);
        
        // Add bell shake animation
        $('#notificationDropdown i').addClass('bell-shake');
        setTimeout(() => {
            $('#notificationDropdown i').removeClass('bell-shake');
        }, 1000);
        
        // Refresh notifications
        loadNotifications();
        
        // Show toast notification
        showToastNotification(notification);
    });
}

function showToastNotification(notification) {
    const toastHtml = `
        <div class="toast position-fixed bottom-0 end-0 m-3" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
            <div class="toast-header">
                <i class="bi bi-bell-fill text-primary me-2"></i>
                <strong class="me-auto">${notification.title || 'New Notification'}</strong>
                <small class="text-muted">Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${notification.message || notification}
            </div>
        </div>
    `;
    
    $('body').append(toastHtml);
    const toast = new bootstrap.Toast($('.toast').last()[0]);
    toast.show();
    
    // Remove toast after it's hidden
    $('.toast').last().on('hidden.bs.toast', function() {
        $(this).remove();
    });
}
$(document).ready(function() {
    // Load notifications when page loads
    loadNotifications();
    
    // Poll for new notifications every 30 seconds
    setInterval(loadNotifications, 30000);
    
    // Add click handler for notification dropdown
    $('#notificationDropdown').on('click', function() {
        loadNotifications();
    });
});

function loadNotifications() {
    @if (SignInManager.IsSignedIn(User))
    {
        <text>
        $.ajax({
            url: '/Notifications/GetUnreadNotifications',
            type: 'GET',
            success: function(data) {
                updateNotificationUI(data);
            },
            error: function() {
                console.log('Error loading notifications');
            }
        });
        </text>
    }
}

function updateNotificationUI(notifications) {
    const container = $('#notificationsContainer');
    const badge = $('#notificationBadge');
    const count = $('#notificationCount');
    const noNotificationsMsg = $('#noNotificationsMessage');
    const markAllBtn = $('#markAllReadBtn');
    
    if (notifications && notifications.length > 0) {
        // Show badge and update count
        badge.show();
        count.text(notifications.length);
        
        // Hide no notifications message
        noNotificationsMsg.hide();
        
        // Show mark all read button
        markAllBtn.show();
        
        // Build notifications HTML
        let notificationsHtml = '';
        notifications.forEach(function(notification) {
            const isUnread = !notification.isRead;
            const timeAgo = formatTimeAgo(notification.createdAt);
            
            notificationsHtml += `
                <div class="dropdown-item notification-item ${isUnread ? 'unread' : ''}" 
                     onclick="markAsRead(${notification.id})" 
                     style="white-space: normal; cursor: pointer;">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="notification-title">${notification.title}</div>
                            <div class="notification-message">${notification.message}</div>
                            <div class="notification-time mt-1">${timeAgo}</div>
                        </div>
                        ${isUnread ? '<div class="ms-2"><i class="bi bi-circle-fill text-primary" style="font-size: 0.5rem;"></i></div>' : ''}
                    </div>
                </div>
            `;
        });
        
        container.html(notificationsHtml);
        
        // Add bell shake animation for new notifications
        $('#notificationDropdown i').addClass('bell-shake');
        setTimeout(() => {
            $('#notificationDropdown i').removeClass('bell-shake');
        }, 1000);
        
    } else {
        // Hide badge
        badge.hide();
        
        // Show no notifications message
        noNotificationsMsg.show();
        
        // Hide mark all read button
        markAllBtn.hide();
        
        // Clear container
        container.html('<div class="text-center py-4" id="noNotificationsMessage"><i class="bi bi-bell-slash text-muted fs-1"></i><p class="text-muted mb-0 mt-2">No new notifications</p></div>');
    }
}

function markAsRead(notificationId) {
    $.ajax({
        url: '/Notifications/MarkAsRead',
        type: 'POST',
        data: { id: notificationId },
        headers: {
            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
        },
        success: function() {
            loadNotifications(); // Reload notifications
        }
    });
}

function markAllAsRead() {
    $.ajax({
        url: '/Notifications/MarkAllAsRead',
        type: 'POST',
        headers: {
            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
        },
        success: function() {
            loadNotifications(); // Reload notifications
        }
    });
}

function formatTimeAgo(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) {
        return 'Just now';
    } else if (diffInSeconds < 3600) {
        const minutes = Math.floor(diffInSeconds / 60);
        return `${minutes}m ago`;
    } else if (diffInSeconds < 86400) {
        const hours = Math.floor(diffInSeconds / 3600);
        return `${hours}h ago`;
    } else {
        const days = Math.floor(diffInSeconds / 86400);
        return `${days}d ago`;
    }
}
</script>
