@page
@model App.Web.pages.PickUpRequest.IndexModel
@using App.Web.ViewModels
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@{
    var user = await UserManager.GetUserAsync(User);
    var roles = user != null ? await UserManager.GetRolesAsync(user) : new List<string>();
    string role = roles.FirstOrDefault() ?? "User";
    bool isCompany = roles.Contains("company");
    bool isShop = roles.Contains("shop");
    bool isDriver = roles.Contains("driver");
    bool isAdmin = roles.Contains("admin");
    Layout = "_Layout";
}

<style>
    .sidebar {
        width: 250px;
        min-height: 100vh;
        background-color: #0d6efd;
        color: #fff;
        padding: 20px;
        position: fixed;
        top: 0;
        left: 0;
    }

        .sidebar a {
            display: block;
            color: #ffffff;
            padding: 10px 15px;
            margin-bottom: 5px;
            border-radius: 6px;
            text-decoration: none;
        }

            .sidebar a:hover {
                background-color: #0b5ed7;
                color: #fff;
            }

        .sidebar .logo {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .sidebar .subtitle {
            font-size: 14px;
            color: #cfd4da;
            margin-bottom: 20px;
        }

        .sidebar .user-box {
            text-align: center;
            margin-bottom: 25px;
        }

            .sidebar .user-box img {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                margin-bottom: 8px;
            }

            .sidebar .user-box .role {
                font-size: 13px;
                background-color: #fff;
                color: #0d6efd;
                padding: 3px 10px;
                border-radius: 12px;
                display: inline-block;
            }

    .main-content {
        margin-left: 270px;
        padding: 30px;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .action-buttons .btn {
        margin-left: 10px;
    }

    .action-btns .btn {
        margin-right: 5px;
    }
</style>

<div class="sidebar">
    @await Html.PartialAsync("_Dashboard")
</div>
<!-- Add this at the bottom of your main page -->
<div class="modal fade" id="addModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Add Pickup Request</h5></div>
            <div class="modal-body" id="modalBody"></div>
        </div>
    </div>
</div>
<!-- Main Content -->


<div class="main-content"> 
    @Html.AntiForgeryToken()

    <div class="page-header">
        <h2 class="fw-bold">PickUpRequests</h2>        <div class="action-buttons">
            <button class="btn btn-secondary">Filter</button>
            <button class="btn btn-outline-success">Export</button>
            <button id="btnDebugData" class="btn btn-warning">Debug Data</button>
            <button id="btnDebugModal" class="btn btn-info">Debug Modal</button>
            @if (isCompany || isShop)
            {
                <button id="btnAddPickup" class="btn btn-primary">Add</button>
            }
        </div>
    </div>

    <table class="table table-hover table-bordered shadow-sm">
        <thead class="table-light">
            <tr>
                <th>PickUpRequestID</th>
                <th>ShopName</th>
                <th>RequestedAt</th>
                <th>Driver</th>
                <th>Status</th>
                <th style="width: 140px;">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in Model.PickupRequests)
            {
                <tr>
                    <td>@request.PickupRequestId</td>
                    <td>@request.ShopName</td>
                    <td>@request.RequestedAt?.ToString("MMM dd, yyyy")</td>
                    <td>@request.DriverName</td>
                    <td>
                        @if (request.IsCompleted == true)
                        {
                            <span class="badge bg-success">Completed</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Pending</span>
                        }
                    </td>
                    <td class="action-btns">
                        <a class="btn btn-sm btn-outline-primary" asp-page="/PickUpRequest/Edit" asp-route-id="@request.PickupRequestId">Edit</a>
                        @if (isCompany || isShop)
                        {                        <button class="btn btn-sm btn-outline-danger"
                                onclick="deletePickupRequest(@request.PickupRequestId, @((request.IsCompleted ?? false).ToString().ToLower()))"
                                @(isShop && (request.IsCompleted ?? false) ? "disabled" : "")>
                                Delete
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@section Scripts {    <script>
        $(document).ready(function () {            $('#btnAddPickup').click(function () {
                console.log('Add button clicked');
                $.get('/PickUpRequest/Index?handler=LoadAddForm', function (response) {
                    console.log('LoadAddForm response type:', typeof response);
                    console.log('LoadAddForm response:', response);
                    
                    if (response.created) {
                        alert("Pickup Request created successfully!");
                        location.reload();
                    } else {
                        console.log('Loading modal with response');
                        $('#modalBody').html(response);
                        $('#addModal').modal('show');
                        
                        // Debug: Check if dropdowns have options after loading
                        setTimeout(function() {
                            var shopOptions = $('#modalBody select[name="SelectedShopId"] option').length;
                            var driverOptions = $('#modalBody select[name="SelectedDriverId"] option').length;
                            console.log('Shop dropdown options count:', shopOptions);
                            console.log('Driver dropdown options count:', driverOptions);
                            
                            // Log the actual options
                            $('#modalBody select[name="SelectedShopId"] option').each(function(i, option) {
                                console.log('Shop option ' + i + ':', $(option).val(), $(option).text());
                            });
                            
                            $('#modalBody select[name="SelectedDriverId"] option').each(function(i, option) {
                                console.log('Driver option ' + i + ':', $(option).val(), $(option).text());
                            });
                        }, 100);
                    }
                }).fail(function(xhr, status, error) {
                    console.error("Error loading add form:", xhr.responseText);
                    console.error("Status:", status, "Error:", error);
                    alert("Error loading the form. Please try again.");
                });
            });
              $('#btnDebugData').click(function () {
                $.get('/PickUpRequest/Index?handler=DebugData', function (response) {
                    console.log('Debug Data Response:', response);
                    
                    // First, let's see the raw response structure
                    console.log('Response structure:', JSON.stringify(response, null, 2));
                    
                    if (response.success) {
                        var message = `Debug Information:\n\n`;
                        
                        // Safely access user properties
                        if (response.user) {
                            message += `User ID: ${response.user.UserId || 'N/A'}\n`;
                            message += `User Email: ${response.user.UserEmail || 'N/A'}\n`;
                            message += `User Roles: ${response.user.UserRoles ? response.user.UserRoles.join(', ') : 'N/A'}\n`;
                            message += `Is Company: ${response.user.IsCompany || false}\n\n`;
                        } else {
                            message += `User information not available\n\n`;
                        }
                        
                        if (response.companyId) {
                            message += `Company ID: ${response.companyId}\n`;
                            message += `Shops Count: ${response.shopsCount || 0}\n`;
                            message += `Drivers Count: ${response.driversCount || 0}\n\n`;
                            
                            if (response.shops && response.shops.length > 0) {
                                message += `Shops:\n`;
                                response.shops.forEach(shop => {
                                    message += `  - ID: ${shop.ShopId}, Name: "${shop.Name}", CompanyId: ${shop.CompanyId}\n`;
                                });
                                message += `\n`;
                            } else {
                                message += `No shops found\n\n`;
                            }
                            
                            if (response.drivers && response.drivers.length > 0) {
                                message += `Drivers:\n`;
                                response.drivers.forEach(driver => {
                                    message += `  - ID: ${driver.DriverId}, Name: "${driver.Name}", CompanyId: ${driver.CompanyId}\n`;
                                });
                            } else {
                                message += `No drivers found\n`;
                            }
                        } else if (response.message) {
                            message += response.message;
                        } else {
                            message += `No company ID found for user`;
                        }
                        
                        alert(message);
                    } else {
                        var errorMessage = `Debug Error: ${response.error || 'Unknown error'}\n\nCheck console for details.`;
                        alert(errorMessage);
                        console.error('Debug Error Details:', response);
                    }
                }).fail(function(xhr, status, error) {
                    console.error("Error calling debug:", xhr.responseText);
                    console.error("Status:", status, "Error:", error);
                    alert("Error calling debug method. Check console for details.");                });
            });
            
            $('#btnDebugModal').click(function () {
                console.log('Debug Modal button clicked');
                $.get('/PickUpRequest/Index?handler=LoadAddForm', function (response) {
                    console.log('Modal response received');
                    console.log('Response type:', typeof response);
                    console.log('Response content (first 500 chars):', response.substring(0, 500));
                    
                    // Create a temporary div to parse the HTML
                    var tempDiv = $('<div>').html(response);
                    
                    // Find the select elements
                    var shopSelect = tempDiv.find('select[name="SelectedShopId"]');
                    var driverSelect = tempDiv.find('select[name="SelectedDriverId"]');
                    
                    console.log('Found shop select:', shopSelect.length > 0);
                    console.log('Found driver select:', driverSelect.length > 0);
                    
                    if (shopSelect.length > 0) {
                        console.log('Shop select HTML:', shopSelect.prop('outerHTML'));
                        console.log('Shop options count:', shopSelect.find('option').length);
                        shopSelect.find('option').each(function(i, opt) {
                            console.log('Shop option ' + i + ':', $(opt).val(), $(opt).text());
                        });
                    }
                    
                    if (driverSelect.length > 0) {
                        console.log('Driver select HTML:', driverSelect.prop('outerHTML'));
                        console.log('Driver options count:', driverSelect.find('option').length);
                        driverSelect.find('option').each(function(i, opt) {
                            console.log('Driver option ' + i + ':', $(opt).val(), $(opt).text());
                        });
                    }
                    
                    alert('Modal debug complete. Check console for detailed output.');
                    
                }).fail(function(xhr, status, error) {
                    console.error("Error loading add form for debug:", xhr.responseText);
                    alert("Error loading the form for debug. Check console.");
                });
            });
        });
    </script><script>
        function deletePickupRequest(id, isCompleted) {
            // For shop users, prevent delete if completed
            var isCompany = '@isCompany'.toLowerCase() === 'true';
            var isShop = '@isShop'.toLowerCase() === 'true';
            
            if (isShop && isCompleted === true) {
                alert("You cannot delete a completed pickup request.");
                return;
            }

            if (confirm("Are you sure you want to delete this pickup request?")) {
                var token = $('input[name="__RequestVerificationToken"]').val();
                
                $.ajax({
                    url: '/PickUpRequest/Index?handler=Delete&id=' + id,
                    type: 'POST',
                    headers: {
                        "RequestVerificationToken": token
                    },
                    success: function (response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert(response.message || "Delete failed.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", xhr.responseText);
                        alert("An error occurred while deleting: " + (xhr.responseJSON?.message || error));
                    }
                });
            }
        }
    </script>

}
