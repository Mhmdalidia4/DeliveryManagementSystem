@page
@model App.Web.pages.PickUpRequest.IndexModel
@using App.Web.ViewModels
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@{
    var user = await UserManager.GetUserAsync(User);
    var roles = await UserManager.GetRolesAsync(user);
    string role = roles.FirstOrDefault() ?? "User";
    bool isCompany = roles.Contains("company");
    bool isShop = roles.Contains("shop");
    bool isDriver = roles.Contains("driver");
    bool isAdmin = roles.Contains("admin");
    Layout = "_Layout";
}

<style>
    .sidebar {
        width: 250px;
        min-height: 100vh;
        background-color: #0d6efd;
        color: #fff;
        padding: 20px;
        position: fixed;
        top: 0;
        left: 0;
    }

        .sidebar a {
            display: block;
            color: #ffffff;
            padding: 10px 15px;
            margin-bottom: 5px;
            border-radius: 6px;
            text-decoration: none;
        }

            .sidebar a:hover {
                background-color: #0b5ed7;
                color: #fff;
            }

        .sidebar .logo {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .sidebar .subtitle {
            font-size: 14px;
            color: #cfd4da;
            margin-bottom: 20px;
        }

        .sidebar .user-box {
            text-align: center;
            margin-bottom: 25px;
        }

            .sidebar .user-box img {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                margin-bottom: 8px;
            }

            .sidebar .user-box .role {
                font-size: 13px;
                background-color: #fff;
                color: #0d6efd;
                padding: 3px 10px;
                border-radius: 12px;
                display: inline-block;
            }

    .main-content {
        margin-left: 270px;
        padding: 30px;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .action-buttons .btn {
        margin-left: 10px;
    }

    .action-btns .btn {
        margin-right: 5px;
    }
</style>

<div class="sidebar">
    @await Html.PartialAsync("_Dashboard")
</div>
<!-- Add this at the bottom of your main page -->
<div class="modal fade" id="addModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Add Pickup Request</h5></div>
            <div class="modal-body" id="modalBody"></div>
        </div>
    </div>
</div>
<!-- Main Content -->


<div class="main-content"> 
   

    <div class="page-header">
        <h2 class="fw-bold">PickUpRequests</h2>
        <div class="action-buttons">
            <button class="btn btn-secondary">Filter</button>
            <button class="btn btn-outline-success">Export</button>
            @if (isCompany || isShop)
            {
                <button id="btnAddPickup" class="btn btn-primary">Add</button>
            }
        </div>
    </div>

    <table class="table table-hover table-bordered shadow-sm">
        <thead class="table-light">
            <tr>
                <th>PickUpRequestID</th>
                <th>ShopName</th>
                <th>RequestedAt</th>
                <th>Driver</th>
                <th>Status</th>
                <th style="width: 140px;">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in Model.PickupRequests)
            {
                <tr>
                    <td>@request.PickupRequestId</td>
                    <td>@request.ShopName</td>
                    <td>@request.RequestedAt?.ToString("MMM dd, yyyy")</td>
                    <td>@request.DriverName</td>
                    <td>
                        @if (request.IsCompleted == true)
                        {
                            <span class="badge bg-success">Completed</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Pending</span>
                        }
                    </td>
                    <td class="action-btns">
                        <a class="btn btn-sm btn-outline-primary" asp-page="/PickUpRequest/Edit" asp-route-id="@request.PickupRequestId">Edit</a>
                        @if (isCompany || isShop)
                        {
                            <button class="btn btn-sm btn-outline-danger"
                                    onclick="deletePickupRequest(@request.PickupRequestId, @request.IsCompleted.ToString().ToLower())"
                                    @(isShop && request.IsCompleted == true ? "disabled" : "")>
                                Delete
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            $('#btnAddPickup').click(function () {
                $.get('?handler=LoadAddForm', function (response) {
                    if (response.created) {
                        alert("Pickup Request created successfully!");
                        location.reload();
                    } else {
                        $('#modalBody').html(response);
                        $('#addModal').modal('show'); // Show modal here ✅
                    }
                });
            });
        });
    </script>
    <script>
                function deletePickupRequest(id, isCompleted) {
            // For shop users, prevent delete if completed
            var isCompany = '@isCompany'.toLowerCase() === 'true';
            var isShop = '@isShop'.toLowerCase() === 'true';
            var userr='@user';
            if (isShop && isCompleted === true) {
                alert("You cannot delete a completed pickup request.");
                return;
            }

            if (confirm("Are you sure you want to delete this pickup request?")) {
                $.ajax({
                    url: '?handler=Delete',
                    type: 'POST',
                    data: { id },
                    headers: {
                        "RequestVerificationToken":
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert(response.message || "Delete failed.");
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error:", xhr.responseText);
                        alert("An error occurred while deleting: " + (xhr.responseJSON?.message || error));
                    }
                });
            }
        }


    </script>

}
